[tool.poetry]
name = "predictions"
version = "0.1.0"
description = ""
authors = ["Maxim Babikhin <babikhin@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12.3"
alembic = "^1.13.1"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.29"}
sqlmodel = "^0.0.16"
fastapi = "^0.110.1"
pydantic-settings = "^2.2.1"
orjson = "^3.10.0"
gunicorn = "^21.2.0"
uvicorn = "^0.29.0"
asyncpg = "^0.29.0"
together = "^1.1.3"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"
ruff = "^0.3.5"
mypy = "^1.9.0"
types-pyyaml = "^6.0.12.20240311"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
src=["app"]
target-version="py312"
exclude=["alembic"]

line-length = 120

[tool.ruff.isort]
known-first-party = ["app"]

[tool.ruff.lint]
fixable = ["ALL"]
select=[
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
